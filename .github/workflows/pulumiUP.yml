name: Pulumi UP

on:
  repository_dispatch:
    types: [new-artifact-available]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: github.event.action == 'new-artifact-available'
    env:
      AWS_REGION: ${{ github.event.client_payload.aws_region }}
      ARTIFACT_BUCKET: ${{ github.event.client_payload.artifact_bucket }}
      ARTIFACT_LIST: |
        auth_key:lambda-auth.zip
    steps:
      - name: Checkout Pulumi Code
        uses: actions/checkout@v4

      - name: Dump GitHub Event Payload
        run: echo '${{ toJSON(github.event) }}' | jq
        shell: bash

      - name: Configure AWS Credentials (Assume Role via OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::140293477718:role/api.tommybradbury.co.uk-pulumiDeploymentUser
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}

      # - name: Fetch and Display Active IAM Policy
      #   run: |
      #     echo "--- Fetching active IAM policies for the role ---"
      #     ROLE_NAME="api.tommybradbury.co.uk-pulumiDeploymentUser"

      #     # Get the ARNs of all managed policies attached to the role
      #     POLICY_ARNS=$(aws iam list-attached-role-policies \
      #       --role-name "$ROLE_NAME" \
      #       --query 'AttachedPolicies[].PolicyArn' \
      #       --output text)

      #     if [ -z "$POLICY_ARNS" ]; then
      #         echo "No attached managed policies found for role $ROLE_NAME."
      #         exit 1
      #     fi

      #     echo "Found attached policy ARNs: $POLICY_ARNS"

      #     # Loop through each policy ARN and get its document
      #     for POLICY_ARN in $POLICY_ARNS; do
      #       echo "--- Reading document for policy: $POLICY_ARN ---"
            
      #       # Get the Default Version ID of the policy
      #       VERSION_ID=$(aws iam get-policy \
      #         --policy-arn "$POLICY_ARN" \
      #         --query 'Policy.DefaultVersionId' \
      #         --output text)
              
      #       echo "Found policy version: $VERSION_ID"

      #       # Get and print the Policy Document for that version
      #       aws iam get-policy-version \
      #         --policy-arn "$POLICY_ARN" \
      #         --version-id "$VERSION_ID" \
      #         --query 'PolicyVersion.Document' \
      #         --output json | jq .
      #     done
      #   shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm install

      - name: Create Lambda Code Directory
        run: mkdir -p lambda_code

      - name: Download All Artifacts from S3
        run: |
          # loop through ARTIFACT_LIST - IFS: internal field seperator
          while IFS=: read -r payload_key target_file; do
            # Trim whitespace from target_file
            target_file=$(echo "$target_file" | tr -d '[:space:]')
            
            # Skip empty lines that might result from the multi-line string
            if [ -z "$payload_key" ]; then
              continue
            fi
            
            ARTIFACT_KEY=$(jq -r --arg key "$payload_key" '.client_payload[$key]' "$GITHUB_EVENT_PATH")
            
            echo "--- Downloading $target_file (Key: $ARTIFACT_KEY) ---"
            if [ -z "$ARTIFACT_KEY" ] || [ "$ARTIFACT_KEY" = "null" ]; then
                echo "Payload key '$payload_key' not found or empty. Skipping download."
                continue
            fi
            
            aws s3 cp "s3://${{ env.ARTIFACT_BUCKET }}/$ARTIFACT_KEY" "./lambda_code/$target_file"
            
          done <<< "$ARTIFACT_LIST"
        shell: bash

#      - name: Verify Downloaded Artifacts
#        run: |
#          echo "Verifying contents of the working directory..."
#          ls -lR

      - name: Refresh Pulumi Stack
        uses: pulumi/actions@v5
        with:
          command: refresh
          stack-name: dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Deploy with Pulumi
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
