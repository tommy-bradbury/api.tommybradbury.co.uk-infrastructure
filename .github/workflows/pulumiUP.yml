name: Pulumi UP

on:
  repository_dispatch:
    types: [new-artifact-available]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: github.event.action == 'new-artifact-available'
    env:
      AWS_REGION: ${{ github.event.client_payload.aws_region }}
      ARTIFACT_BUCKET: ${{ github.event.client_payload.artifact_bucket }}
      ARTIFACT_LIST: |
        auth_key:lambda-auth.zip
    steps:
      - name: Checkout Pulumi Code
        uses: actions/checkout@v4

      - name: Dump GitHub Event Payload
        run: echo '${{ toJSON(github.event) }}' | jq
        shell: bash

      - name: Configure AWS Credentials (Assume Role via OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::140293477718:role/api.tommybradbury.co.uk-pulumiDeploymentUser
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Verify AWS Credentials and Permissions
        run: |
          echo "--- Verifying AWS identity ---"
          ASSUMED_ROLE_ARN=$(aws sts get-caller-identity --query Arn --output text)
          echo "Currently assumed role: $ASSUMED_ROLE_ARN"
          
          echo "--- Simulating iam:CreateServiceLinkedRole permission ---"
          aws iam simulate-principal-policy \
            --policy-source-arn "$ASSUMED_ROLE_ARN" \
            --action-names "iam:CreateServiceLinkedRole" \
            --resource-arns "arn:aws:iam::*:role/aws-service-role/apigateway.amazonaws.com/AWSServiceRoleForAPIGateway"
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm install

      - name: Create Lambda Code Directory
        run: mkdir -p lambda_code

      - name: Download All Artifacts from S3
        run: |
          # loop through ARTIFACT_LIST - IFS: internal field seperator
          while IFS=: read -r payload_key target_file; do
            # Trim whitespace from target_file
            target_file=$(echo "$target_file" | tr -d '[:space:]')
            
            # Skip empty lines that might result from the multi-line string
            if [ -z "$payload_key" ]; then
              continue
            fi
            
            ARTIFACT_KEY=$(jq -r --arg key "$payload_key" '.client_payload[$key]' "$GITHUB_EVENT_PATH")
            
            echo "--- Downloading $target_file (Key: $ARTIFACT_KEY) ---"
            if [ -z "$ARTIFACT_KEY" ] || [ "$ARTIFACT_KEY" = "null" ]; then
                echo "Payload key '$payload_key' not found or empty. Skipping download."
                continue
            fi
            
            aws s3 cp "s3://${{ env.ARTIFACT_BUCKET }}/$ARTIFACT_KEY" "./lambda_code/$target_file"
            
          done <<< "$ARTIFACT_LIST"
        shell: bash

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying contents of the working directory..."
          ls -lR

      - name: Deploy with Pulumi
        uses: pulumi/actions@v5
        with:
          command: up
          stack-name: dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

